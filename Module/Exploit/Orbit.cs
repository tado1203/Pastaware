using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;
using VRC.SDKBase;

public class Orbit : Module
{
    public Orbit() : base("Orbit", false, UnityEngine.KeyCode.O) {}

    List<VRC_Pickup> Pickups = new List<VRC_Pickup>();
    float Speed = 1f;
    float Distance = 1f;
    float Height = 1f;

    public override void Update()
    {
        if (VRCUtil.IsInWorld() && IsEnabled)
        {
            //pasted from AstralPickups
            if (Pickups.Count == 0) return;
            
            float degrees = 360 / Pickups.Count;

            int index = 0;
            foreach (var pickup in Pickups.ToList())
            {
                if (pickup == null)
                {
                    Pickups = UnityEngine.Object.FindObjectsOfType<VRC_Pickup>().ToList();
                    
                    return;
                }

                if (Networking.GetOwner(pickup.gameObject) != Networking.LocalPlayer)
                {
                    Networking.SetOwner(Networking.LocalPlayer, pickup.gameObject);
                }

                pickup.transform.position = Networking.LocalPlayer.gameObject.transform.position + new Vector3(Mathf.Sin(Time.time * Speed + degrees * index) * Distance, Height, Mathf.Cos(Time.time * Speed + degrees * index) * Distance);
                index++;
            }
        }
    }

    public override void OnEnable()
    {
        Pickups = UnityEngine.Object.FindObjectsOfType<VRC_Pickup>().ToList();
    }

    public override void OnWorldChange()
    {
        Pickups.Clear();
    }
}